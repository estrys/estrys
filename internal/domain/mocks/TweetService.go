// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/estrys/estrys/internal/twitter/models"

	twitter "github.com/g8rswimmer/go-twitter/v2"
)

// TweetService is an autogenerated mock type for the TweetService type
type TweetService struct {
	mock.Mock
}

type TweetService_Expecter struct {
	mock *mock.Mock
}

func (_m *TweetService) EXPECT() *TweetService_Expecter {
	return &TweetService_Expecter{mock: &_m.Mock}
}

// SaveTweetAndReferences provides a mock function with given fields: _a0, _a1
func (_m *TweetService) SaveTweetAndReferences(_a0 context.Context, _a1 *twitter.TweetObj) (*models.Tweet, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.Tweet
	if rf, ok := ret.Get(0).(func(context.Context, *twitter.TweetObj) *models.Tweet); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tweet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *twitter.TweetObj) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TweetService_SaveTweetAndReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveTweetAndReferences'
type TweetService_SaveTweetAndReferences_Call struct {
	*mock.Call
}

// SaveTweetAndReferences is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *twitter.TweetObj
func (_e *TweetService_Expecter) SaveTweetAndReferences(_a0 interface{}, _a1 interface{}) *TweetService_SaveTweetAndReferences_Call {
	return &TweetService_SaveTweetAndReferences_Call{Call: _e.mock.On("SaveTweetAndReferences", _a0, _a1)}
}

func (_c *TweetService_SaveTweetAndReferences_Call) Run(run func(_a0 context.Context, _a1 *twitter.TweetObj)) *TweetService_SaveTweetAndReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*twitter.TweetObj))
	})
	return _c
}

func (_c *TweetService_SaveTweetAndReferences_Call) Return(_a0 *models.Tweet, _a1 error) *TweetService_SaveTweetAndReferences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewTweetService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTweetService creates a new instance of TweetService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTweetService(t mockConstructorTestingTNewTweetService) *TweetService {
	mock := &TweetService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
