// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domainmodels "github.com/estrys/estrys/internal/domain/domainmodels"

	mock "github.com/stretchr/testify/mock"

	models "github.com/estrys/estrys/internal/models"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// BatchCreateUsers provides a mock function with given fields: ctx, allowedTwitterUsers
func (_m *UserService) BatchCreateUsers(ctx context.Context, allowedTwitterUsers []string) error {
	ret := _m.Called(ctx, allowedTwitterUsers)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, allowedTwitterUsers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_BatchCreateUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchCreateUsers'
type UserService_BatchCreateUsers_Call struct {
	*mock.Call
}

// BatchCreateUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - allowedTwitterUsers []string
func (_e *UserService_Expecter) BatchCreateUsers(ctx interface{}, allowedTwitterUsers interface{}) *UserService_BatchCreateUsers_Call {
	return &UserService_BatchCreateUsers_Call{Call: _e.mock.On("BatchCreateUsers", ctx, allowedTwitterUsers)}
}

func (_c *UserService_BatchCreateUsers_Call) Run(run func(ctx context.Context, allowedTwitterUsers []string)) *UserService_BatchCreateUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *UserService_BatchCreateUsers_Call) Return(_a0 error) *UserService_BatchCreateUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

// BatchCreateUsersFromIDs provides a mock function with given fields: _a0, _a1
func (_m *UserService) BatchCreateUsersFromIDs(_a0 context.Context, _a1 []string) ([]*models.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*models.User
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*models.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_BatchCreateUsersFromIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchCreateUsersFromIDs'
type UserService_BatchCreateUsersFromIDs_Call struct {
	*mock.Call
}

// BatchCreateUsersFromIDs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []string
func (_e *UserService_Expecter) BatchCreateUsersFromIDs(_a0 interface{}, _a1 interface{}) *UserService_BatchCreateUsersFromIDs_Call {
	return &UserService_BatchCreateUsersFromIDs_Call{Call: _e.mock.On("BatchCreateUsersFromIDs", _a0, _a1)}
}

func (_c *UserService_BatchCreateUsersFromIDs_Call) Run(run func(_a0 context.Context, _a1 []string)) *UserService_BatchCreateUsersFromIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *UserService_BatchCreateUsersFromIDs_Call) Return(_a0 []*models.User, _a1 error) *UserService_BatchCreateUsersFromIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetFullUser provides a mock function with given fields: _a0, _a1
func (_m *UserService) GetFullUser(_a0 context.Context, _a1 string) (*domainmodels.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *domainmodels.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *domainmodels.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domainmodels.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetFullUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFullUser'
type UserService_GetFullUser_Call struct {
	*mock.Call
}

// GetFullUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *UserService_Expecter) GetFullUser(_a0 interface{}, _a1 interface{}) *UserService_GetFullUser_Call {
	return &UserService_GetFullUser_Call{Call: _e.mock.On("GetFullUser", _a0, _a1)}
}

func (_c *UserService_GetFullUser_Call) Run(run func(_a0 context.Context, _a1 string)) *UserService_GetFullUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_GetFullUser_Call) Return(_a0 *domainmodels.User, _a1 error) *UserService_GetFullUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
