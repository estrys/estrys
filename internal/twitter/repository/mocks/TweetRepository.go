// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/estrys/estrys/internal/twitter/models"
	mock "github.com/stretchr/testify/mock"
)

// TweetRepository is an autogenerated mock type for the TweetRepository type
type TweetRepository struct {
	mock.Mock
}

// GetTweet provides a mock function with given fields: _a0, _a1
func (_m *TweetRepository) GetTweet(_a0 context.Context, _a1 string) (*models.Tweet, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.Tweet
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Tweet); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tweet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: _a0, _a1
func (_m *TweetRepository) Store(_a0 context.Context, _a1 *models.Tweet) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Tweet) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTweetRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTweetRepository creates a new instance of TweetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTweetRepository(t mockConstructorTestingTNewTweetRepository) *TweetRepository {
	mock := &TweetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
