// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	internaltwitter "github.com/estrys/estrys/internal/twitter"
	mock "github.com/stretchr/testify/mock"

	twitter "github.com/g8rswimmer/go-twitter/v2"
)

// TwitterClient is an autogenerated mock type for the TwitterClient type
type TwitterClient struct {
	mock.Mock
}

// GetTweets provides a mock function with given fields: _a0, _a1, _a2
func (_m *TwitterClient) GetTweets(_a0 context.Context, _a1 string, _a2 twitter.UserTweetTimelineOpts) (*twitter.UserTweetTimelineResponse, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *twitter.UserTweetTimelineResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, twitter.UserTweetTimelineOpts) *twitter.UserTweetTimelineResponse); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*twitter.UserTweetTimelineResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, twitter.UserTweetTimelineOpts) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, username
func (_m *TwitterClient) GetUser(ctx context.Context, username string) (*internaltwitter.User, error) {
	ret := _m.Called(ctx, username)

	var r0 *internaltwitter.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *internaltwitter.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internaltwitter.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTwitterClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewTwitterClient creates a new instance of TwitterClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTwitterClient(t mockConstructorTestingTNewTwitterClient) *TwitterClient {
	mock := &TwitterClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
